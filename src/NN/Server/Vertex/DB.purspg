module NN.Server.Vertex.DB
( readVertex
, createVertex
, updateVertex
, createEdge
) where

import Database.PostgreSQL (Connection, execute, POSTGRESQL, Query(..), query, withTransaction)
import Data.UUID (GENUUID)
import Data.UUID as UUID
import NN.File (FileID(..))
import NN.Prelude
import NN.Vertex (Vertex(..), VertexID(..))
import NN.Vertex.Style (Style(..))

readVertex
    :: ∀ eff
     . Connection
    -> FileID
    -> VertexID
    -> Aff (postgreSQL :: POSTGRESQL | eff) (Maybe Vertex)
readVertex conn (FileID fileID) (VertexID vertexID) = do
    query conn [query|
        SELECT
            v.note,
            CASE WHEN count(e.*) = 0 THEN
                ARRAY[] :: uuid[]
            ELSE
                array_agg(e.child_id ORDER BY e.index ASC)
            END,
            v.style
        FROM vertices AS v
        LEFT JOIN edges AS e
            ON e.parent_id = v.id
        WHERE
                v.file_id = $1
            AND v.id = $2
        GROUP BY v.id
    |] (fileID /\ vertexID /\ unit)
    <#> case _ of
        [note /\ children /\ style /\ (_ :: Unit)] ->
            Just $ Vertex note (map VertexID children) (parseStyle style)
        _ -> Nothing
    where
    parseStyle 'N' = Normal
    parseStyle 'D' = Dimmed
    parseStyle 'G' = Grass
    parseStyle 'O' = Ocean
    parseStyle 'P' = Peachpuff
    parseStyle 'H' = HotdogStand
    parseStyle _ = Normal

createVertex
    :: ∀ eff
     . Connection
    -> FileID
    -> Aff (uuid :: GENUUID, postgreSQL :: POSTGRESQL | eff) VertexID
createVertex conn (FileID fileID) = do
    vertexIDStr <- liftEff $ show <$> UUID.genUUID
    execute conn [query|
        INSERT INTO vertices (id, note, style, file_id)
        VALUES ($1, '', 'normal', $2)
    |] (vertexIDStr /\ fileID /\ unit)
    pure $ VertexID vertexIDStr

updateVertex
    :: ∀ eff
     . Connection
    -> FileID
    -> VertexID
    -> Vertex
    -> Aff (postgreSQL :: POSTGRESQL | eff) Unit
updateVertex conn (FileID fileID) (VertexID vertexID) (Vertex note children style) =
    withTransaction conn do
        execute conn [query|
            DELETE FROM edges AS e
            WHERE
                    e.parent_id = $2
                AND (SELECT v.file_id = $1 FROM vertices AS v WHERE v.id = $2)
        |] (fileID /\ vertexID /\ unit)
        for_ children \child ->
            createEdge conn (FileID fileID) {parentID: VertexID vertexID, childID: child}
        execute conn [query|
            UPDATE vertices
            SET
                note = $3,
                style = $4
            WHERE
                    file_id = $1
                AND id = $2
        |] (fileID /\ vertexID /\ note /\ serializeStyle style /\ unit)
    where
    serializeStyle Normal      = 'N'
    serializeStyle Dimmed      = 'D'
    serializeStyle Grass       = 'G'
    serializeStyle Ocean       = 'O'
    serializeStyle Peachpuff   = 'P'
    serializeStyle HotdogStand = 'H'

createEdge
    :: ∀ eff
     . Connection
    -> FileID
    -> {parentID :: VertexID, childID :: VertexID}
    -> Aff (postgreSQL :: POSTGRESQL | eff) Unit
createEdge conn (FileID fileID) {parentID: VertexID parentID, childID: VertexID childID} =
    execute conn [query|
        INSERT INTO edges (parent_id, child_id, index)
        SELECT $2, $3, nextval('edge_index')
        WHERE (
            SELECT every(v.file_id = $1) AND count(v.*) = 2
            FROM vertices AS v
            WHERE v.id IN ($2, $3)
        )
    |] (fileID /\ parentID /\ childID /\ unit)
