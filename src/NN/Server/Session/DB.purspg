module NN.Server.Session.DB
( readSession
, createSession
) where

import Database.PostgreSQL (Connection, POSTGRESQL, Query(..), query)
import NN.Prelude
import NN.Session (Session(..), SessionID(..))
import NN.User (UserID(..))
import Partial.Unsafe (unsafeCrashWith)

readSession
    :: ∀ eff
     . Connection
    -> SessionID
    -> Aff (postgreSQL :: POSTGRESQL | eff) (Maybe Session)
readSession conn (SessionID sessionID) =
    query conn [query|
        SELECT user_id, description
        FROM sessions
        WHERE id = $1 :: text :: bytea
    |] (sessionID /\ unit)
    <#> case _ of
        [userID /\ description /\ (_ :: Unit)] ->
            Just $ Session (UserID userID) description
        _ -> Nothing

createSession
    :: ∀ eff
     . Connection
    -> Session
    -> Aff (postgreSQL :: POSTGRESQL | eff) SessionID
createSession conn (Session (UserID userID) description) =
    query conn [query|
        INSERT INTO sessions (id, user_id, description)
        VALUES (gen_random_bytes(64), $1, $2)
        RETURNING id :: text
    |] (userID /\ description /\ unit)
    <#> case _ of
        [sessionID /\ (_ :: Unit)] -> SessionID sessionID
        _ -> unsafeCrashWith "createSession"
